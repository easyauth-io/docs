{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EasyAuth Documentation","text":"<p>EasyAuth provides end-to-end user authentication and user management that can be set up in minutes.</p>"},{"location":"#quickstart-tutorials","title":"Quickstart Tutorials","text":"<ul> <li> React</li> <li> Express Passport.js</li> <li> Next.js &amp; next-auth</li> <li> Java Spring Boot</li> <li> JavaScript</li> </ul>"},{"location":"quickstart/easyauth-next-auth/","title":"Get started with Next-Auth and EasyAuth","text":"<p>Learn how to authenticate users through NextAuth using EasyAuth provider.</p> TLDR: Try the sample Easyauth NextAuth project <ol> <li> <p>Sign in to EasyAuth and create a new 'Registered Client' with redirect URI set to <code>http://127.0.0.1:3000/auth/easyauth/callback</code>.</p> </li> <li> <p>Clone the sample app.</p> <p><code>git clone https://github.com/easyauth-io/easyauth-next-auth-example.git</code></p> </li> <li> <p>Copy <code>.env</code> into <code>.env.local</code></p> <p><code>cp .env .env.local</code></p> </li> <li> <p>Edit <code>.env.local</code> and set the parameters from your 'Registered Client' that you created in Step 1.</p> </li> <li> <p>Run <code>npm install</code> followed by <code>npm run dev</code></p> </li> <li> <p>Visit http://127.0.0.1:3000</p> </li> </ol> <p>Note: Replace the port <code>3000</code> in <code>.env.local</code> and redirect URI with the corresponding port where your app is runing.</p>"},{"location":"quickstart/easyauth-next-auth/#1-create-a-new-nextjs-application","title":"1. Create a new Next.js Application","text":"<p>The following command creates a Next.js app. Configure the prompts as required.</p> npmyarn <pre><code>npx create-next-app@latest\n</code></pre> <pre><code>yarn create next-app\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#2-install-easyauthioeasyauth-next-auth-next-auth","title":"2. Install @easyauth.io/easyauth-next-auth &amp; next-auth","text":"npmyarn <pre><code>npm install @easyauth.io/easyauth-next-auth next-auth --save\n</code></pre> <pre><code>yarn add @easyauth.io/easyauth-next-auth next-auth\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#3-set-easyauth-keys-in-envlocal-file","title":"3. Set EasyAuth keys in <code>.env.local</code> file","text":"<p>Create a <code>.env.local</code> file. Fill in the values by logging in to your EasyAuth dashboard.</p> <p>The <code>NEXTAUTH_URL</code> will be the url where your app will be running. In this case, for development purpose it will be running on <code>http://127.0.0.1:3000</code>.</p> .env.local<pre><code>NEXTAUTH_URL=http://127.0.0.1:3000\nEASYAUTH_CLIENT_ID=&lt;client_id&gt;\nEASYAUTH_CLIENT_SECRET=&lt;client_secret&gt;\nNEXT_PUBLIC_EASYAUTH_TENANT_URL=&lt;tenant_url&gt;\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#4-create-nextauthjs-file-setup-next-auth","title":"4. Create <code>[...nextauth].js</code> file &amp; setup next-auth","text":"<p>Refer the next-auth documentation and create <code>[...nextauth].js</code> file in <code>pages/api/auth</code> directory. Setup next-auth as follows.</p> [...nextauth].js<pre><code>import NextAuth from \"next-auth\";\nimport EasyAuth from \"@easyauth.io/easyauth-next-auth\";\n\nexport const authOptions = {\n  providers: [\n    EasyAuth({\n      clientId: process.env.EASYAUTH_CLIENT_ID,\n      clientSecret: process.env.EASYAUTH_CLIENT_SECRET,\n      tenantURL: process.env.NEXT_PUBLIC_EASYAUTH_TENANT_URL,\n    }),\n  ],\n  secret: \"my-secret\",\n  callbacks: {\n    async jwt({token, account, profile}) {\n      //Refresh token implementation\n      if (account) {\n        return {\n          access_token: account.access_token,\n          expires_at: account.expires_at,\n          refresh_token: account.refresh_token,\n          ...token,\n        };\n      } else if (Date.now() &lt; token.expires_at * 1000) {\n        return token;\n      } else {\n        try {\n          const response = await fetch(\n            new URL(\n              \"/tenantbackend/oauth2/token\",\n              process.env.NEXT_PUBLIC_EASYAUTH_TENANT_URL\n            ),\n            {\n              headers: {\"Content-Type\": \"application/x-www-form-urlencoded\"},\n              body: new URLSearchParams({\n                client_id: process.env.EASYAUTH_CLIENT_ID,\n                client_secret: process.env.EASYAUTH_CLIENT_SECRET,\n                grant_type: \"refresh_token\",\n                refresh_token: token.refresh_token,\n              }),\n              method: \"POST\",\n            }\n          );\n\n          const tokens = await response.json();\n\n          if (!response.ok) throw tokens;\n\n          return {\n            ...token, // Keep the previous token properties\n            access_token: tokens.access_token,\n            expires_at: Math.floor(Date.now() / 1000 + tokens.expires_in),\n            refresh_token: tokens.refresh_token ?? token.refresh_token,\n          };\n        } catch (error) {\n          console.error(\"Error refreshing access token\", error);\n          return {...token, error: \"RefreshAccessTokenError\"};\n        }\n      }\n    },\n    async session({session, token}) {\n      session.user.access_token = token.access_token;\n      session.error = token.error;\n      return session;\n    },\n  },\n};\nexport default NextAuth(authOptions);\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#5-create-utilcheckrefreshtokenerrorjs-file","title":"5. Create <code>util/checkRefreshTokenError.js</code> file","text":"<p>This is to resolve error in refreshing Access token occured at jwt callback above. The error is generally due to expired Refresh token.</p> checkRefreshTokenError.js<pre><code>import {signOut, useSession} from \"next-auth/react\";\nimport {useEffect} from \"react\";\n\nexport function checkRefreshTokenError() {\n  const {data: session} = useSession();\n\n  useEffect(() =&gt; {\n    if (session?.error === \"RefreshAccessTokenError\") {\n      // Force sign out to resolve error\n      // Generally the error is due to expired Refresh token.\n      signOut({redirect: false}).then(() =&gt; {\n        // To signout from EasyAuth Tenant.\n        window.location.assign(\n          `${process.env.NEXT_PUBLIC_EASYAUTH_TENANT_URL}/logout?target=${btoa(\n            window.location.href\n          )}`\n        );\n      });\n    }\n  }, [session]);\n}\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#6-edit-pagesindexjs-file","title":"6. Edit <code>pages/index.js</code> file","text":"index.js<pre><code>import Head from \"next/head\";\nimport {useSession, signIn, signOut} from \"next-auth/react\";\nimport {checkRefreshTokenError} from \"@/util/checkRefreshTokenError\";\nimport Link from \"next/link\";\n\nexport default function Home() {\n  const {data: session, status} = useSession();\n  checkRefreshTokenError();\n\n  return (\n    &lt;&gt;\n      &lt;Head&gt;\n        &lt;title&gt;EasyAuth NextAuth example&lt;/title&gt;\n        &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n      &lt;/Head&gt;\n      &lt;main&gt;\n        &lt;div className=\"hero\"&gt;\n          {status !== \"loading\" &amp;&amp; (\n            &lt;&gt;\n              {session ? (\n                &lt;&gt;\n                  Signed in as {session.user.email} &lt;br /&gt;\n                  &lt;button\n                    onClick={() =&gt; {\n                      signOut({redirect: false}).then(() =&gt; {\n                        // To signout from EasyAuth Tenant.\n                        window.location.assign(\n                          `${\n                            process.env.NEXT_PUBLIC_EASYAUTH_TENANT_URL\n                          }/logout?target=${btoa(window.location.href)}`\n                        );\n                      });\n                    }}\n                  &gt;\n                    Sign out\n                  &lt;/button&gt;\n                  &lt;Link href={\"/profile\"}&gt;\n                    &lt;button&gt;EasyAuth user profile&lt;/button&gt;\n                  &lt;/Link&gt;\n                &lt;/&gt;\n              ) : (\n                &lt;&gt;\n                  Not signed in . &lt;br /&gt;\n                  &lt;button onClick={() =&gt; signIn(\"easyauth\")}&gt;Sign in&lt;/button&gt;\n                &lt;/&gt;\n              )}\n              &lt;Link href={\"/protected\"}&gt;\n                &lt;button&gt;Protected page&lt;/button&gt;\n              &lt;/Link&gt;\n            &lt;/&gt;\n          )}\n        &lt;/div&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#7-create-pagesprotectedjs-file","title":"7. Create <code>pages/protected.js</code> file","text":"<p>This page is protected from unauthenticated users.</p> protected.js<pre><code>import {useSession} from \"next-auth/react\";\nimport {useRouter} from \"next/router\";\nimport {checkRefreshTokenError} from \"@/util/checkRefreshTokenError\";\nimport Link from \"next/link\";\n\nexport default function ProtectedPage() {\n  const router = useRouter();\n  const {data: session, status} = useSession({\n    required: true,\n    onUnauthenticated() {\n      router.push(\"/\");\n    },\n  });\n\n  checkRefreshTokenError();\n\n  if (status === \"loading\") {\n    return null;\n  }\n\n  return (\n    &lt;div className=\"hero\"&gt;\n      &lt;h1&gt;Protected Page&lt;/h1&gt;\n      &lt;p&gt;Welcome, {JSON.stringify(session.user.email)}&lt;/p&gt;\n      &lt;Link href={\"/\"}&gt;\n        &lt;button&gt;Home page&lt;/button&gt;\n      &lt;/Link&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#8-create-pagesprofilejs-file","title":"8. Create <code>pages/profile.js</code> file","text":"<p>Page for fetching EasyAuth profile details.</p> profile.js<pre><code>import {useSession} from \"next-auth/react\";\nimport {useRouter} from \"next/router\";\nimport React, {useEffect, useState} from \"react\";\nimport {checkRefreshTokenError} from \"@/util/checkRefreshTokenError\";\nimport Link from \"next/link\";\n\nexport default function Profile() {\n  const router = useRouter();\n  const {data: session, status} = useSession({\n    required: true,\n    onUnauthenticated() {\n      router.push(\"/\");\n    },\n  });\n  const [easyAuthProfile, setEasyAuthProfile] = useState(null);\n\n  checkRefreshTokenError();\n\n  useEffect(() =&gt; {\n    if (session) {\n      fetch(\n        new URL(\n          \"/tenantbackend/api/profile\",\n          process.env.NEXT_PUBLIC_EASYAUTH_TENANT_URL\n        ),\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${session.user.access_token}`,\n          },\n        }\n      )\n        .then((res) =&gt; res.json())\n        .then((data) =&gt; setEasyAuthProfile(data))\n        .catch((err) =&gt; console.error(\"Failed to fetch EasyAuth profile\"));\n    }\n  }, [status]);\n\n  if (status === \"loading\") {\n    return null;\n  }\n\n  return (\n    &lt;div className=\"hero\"&gt;\n      &lt;h3&gt;EasyAuth profile&lt;/h3&gt;\n      &lt;p&gt;{easyAuthProfile &amp;&amp; JSON.stringify(easyAuthProfile)}&lt;/p&gt;\n      &lt;Link href={\"/\"}&gt;\n        &lt;button&gt;Home page&lt;/button&gt;\n      &lt;/Link&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#9-add-some-css","title":"9. Add some CSS","text":"globals.css<pre><code>.hero {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 5em 0;\n  gap: 2rem;\n  font-size: 1.3rem;\n}\n\n.hero button {\n  cursor: pointer;\n  padding: 10px 20px;\n  border: none;\n  background-color: rgb(34, 139, 230);\n  color: white;\n}\n\n.hero button:hover {\n  background-color: rgb(21, 110, 188);\n}\n</code></pre>"},{"location":"quickstart/easyauth-next-auth/#test-the-app","title":"Test the App","text":"<p>Run the application and then open the URL http://127.0.0.1:3000.</p> npmyarn <pre><code>npm run dev\n</code></pre> <pre><code>yarn dev\n</code></pre>"},{"location":"quickstart/express-passport/","title":"Get started with Express and Passport.js","text":"<p>Learn how to authenticate users through Express app and Passport.js using EasyAuth strategy.</p> TLDR: Try the sample Easyauth Passport project <ol> <li> <p>Sign in to easyauth.io and create a new 'Registered Client' with redirect URI set to <code>http://127.0.0.1:3000/auth/easyauth/callback</code></p> </li> <li> <p>Clone the example app from https://github.com/easyauth-io/easyauth-passport-example</p> <p><code>git clone https://github.com/easyauth-io/easyauth-passport-example</code></p> </li> <li> <p>Edit <code>.env</code> and set the parameters from your 'Registered Client' that you created in Step 1</p> </li> <li> <p>Run <code>npm install</code> followed by <code>npm run start</code></p> </li> <li> <p>Visit http://127.0.0.1:3000/auth/easyauth/login</p> </li> </ol>"},{"location":"quickstart/express-passport/#1-create-a-new-nodejs-application","title":"1. Create a new Nodejs Application","text":"<p>The following command creates a node app in the directory named <code>myapp</code>. Change <code>myapp</code> to the directory name of your choice.</p> npm <pre><code>mkdir myapp\ncd myapp\nnpm init\n</code></pre>"},{"location":"quickstart/express-passport/#2-install-required-dependencies","title":"2. Install required Dependencies","text":"<p>This is to install the dependencies required to setup express app and passport.</p> <pre><code>npm install express passport express-session dotenv @easyauth.io/passport-easyauth\n</code></pre>"},{"location":"quickstart/express-passport/#3-set-easyauth-keys-in-env-file","title":"3. Set EasyAuth keys in <code>.env</code> file","text":"<p>Create a <code>.env</code> file. Log in to your EasyAuth dashboard and create a new Registered Client. Set the Redirect URL to <code>http://127.0.0.1:3000/auth/easyauth/callback</code> and then fill the values as shown.</p> .env<pre><code>EASYAUTH_DISCOVERY_URL=https://&lt;your_subdomain/tenant_name&gt;.app.easyauth.io\nEASYAUTH_CLIENT_ID=&lt;client_id&gt;\nEASYAUTH_CLIENT_SECRET=&lt;client_secret&gt;\nPORT=3000\n</code></pre>"},{"location":"quickstart/express-passport/#4-edit-strategyjs","title":"4. Edit <code>strategy.js</code>:","text":"<p>Create a new file named <code>strategy.js</code> for initializing EasyAuth strategy and edit it as follows:</p> strategy.js<pre><code>const passport = require(\"passport\");\nconst EasyAuthStrategy = require(\"@easyauth.io/passport-easyauth\");\nrequire(\"dotenv\").config();\n\nconst PORT = process.env.PORT;\npassport.use(\n  new EasyAuthStrategy(\n    {\n      discoveryURL: process.env.EASYAUTH_DISCOVERY_URL,\n      clientID: process.env.EASYAUTH_CLIENT_ID,\n      clientSecret: process.env.EASYAUTH_CLIENT_SECRET,\n      callbackURL: [`http://127.0.0.1:${PORT}/auth/easyauth/callback`],\n    },\n    function (tokenset, userinfo, done) {\n      done(null, userinfo);\n    }\n  )\n);\n</code></pre>"},{"location":"quickstart/express-passport/#5-edit-indexjs","title":"5. Edit <code>index.js</code>:","text":"<p>Create a new file named <code>index.js</code> and edit it as follows:</p> index.js<pre><code>const express = require(\"express\");\nconst session = require(\"express-session\");\nconst passport = require(\"passport\");\nconst app = express();\n\nrequire(\"./strategy\");\nrequire(\"dotenv\").config();\n\nconst PORT = process.env.PORT;\n\napp.use(\n  session({\n    secret: \"your secret key\",\n    resave: false,\n    saveUninitialized: false,\n  })\n);\n\napp.use(passport.initialize());\napp.use(passport.session());\n\n//A middleware to check user for protected routes.\nconst isAuthenticated = (req, res, next) =&gt; {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.redirect(\"/auth/easyauth/login\");\n};\n\npassport.serializeUser((user, done) =&gt; done(null, user));\npassport.deserializeUser((user, done) =&gt; done(null, user));\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"EasyAuth Passport Home Page\");\n});\n\n//Login Route\napp.get(\n  \"/auth/easyauth/login\",\n  passport.authenticate(\"easyauth\", {scope: \"openid\"})\n);\n\n//Callback Route\napp.get(\n  \"/auth/easyauth/callback\",\n  passport.authenticate(\"easyauth\", {failureRedirect: \"/failed\"}),\n  (req, res) =&gt; {\n    res.redirect(\"/protectedroute\");\n  }\n);\n\n//Logout Route\napp.get(\"/auth/easyauth/logout\", (req, res) =&gt; {\n  req.session.destroy((err) =&gt; {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(\"Successfully Logged out.\");\n    }\n  });\n});\n\n//Failed Route\napp.get(\"/failed\", (req, res) =&gt; {\n  res.send(\"Login Failed\");\n});\n\n//Protected success Route\napp.get(\"/protectedroute\", isAuthenticated, (req, res) =&gt; {\n  res.send(`User: ${JSON.stringify(req.user)}`);\n});\n\n//Get EasyAuth profile\napp.get(\"/easyauthprofile\", isAuthenticated, async (req, res) =&gt; {\n  try {\n    const accessToken = req.user.tokenset.access_token;\n    const response = await fetch(\n      new URL(\"/tenantbackend/api/profile\", process.env.EASYAUTH_DISCOVERY_URL),\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    if (response.ok) {\n      const userInfo = await response.json();\n      res.send(JSON.stringify(userInfo));\n    } else {\n      res.send(\"Failed to fetch User Info.\").status(response.status);\n    }\n  } catch (error) {\n    res.send(\"Failed to fetch User Info\").status(500);\n  }\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Server started on http://127.0.0.1:${PORT}.`);\n});\n</code></pre>"},{"location":"quickstart/express-passport/#test-the-app","title":"Test the App","text":"<p>Run the application on <code>127.0.0.1</code>. Then open the URL http://127.0.0.1:3000/auth/easyauth/login to test the authentication.</p> npm <pre><code>node index.js\n</code></pre>"},{"location":"quickstart/java-spring-boot/","title":"Get started with Java Spring Boot","text":"<p>Learn how to authenticate users in a Java Spring Boot application using EasyAuth.</p> TLDR: Try the sample Java-Spring-Boot project <ol> <li> <p>Sign in to easyauth.io and create a new 'Registered Client' with redirect URI set to <code>http://127.0.0.1:8080/login/oauth2/code/easyauth</code></p> </li> <li> <p>Clone the sample app from https://github.com/easyauth-io/easyauth-spring-boot-example</p> <p><code>git clone https://github.com/easyauth-io/easyauth-spring-boot-example.git</code></p> </li> <li> <p>Open the project in your favourite editor.</p> </li> <li> <p>Edit the <code>src/main/resources/application.properties</code> file and set the values from your 'Registered Client' that you created in step 1 in place of the curly braces - {}.</p> </li> <li> <p>Run the project and visit http://127.0.0.1:8080</p> </li> </ol>"},{"location":"quickstart/java-spring-boot/#1-create-a-new-spring-boot-application","title":"1. Create a new Spring Boot Application","text":"<p>Generate a new spring boot web project from https://start.spring.io.</p> <p>Add the <code>spring-boot-starter-oauth2-client</code> starter in <code>pom.xml</code> file of your Maven project, it provides all the necessary dependencies required to authenticate your application.</p> pom.xml<pre><code>&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-oauth2-client&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n&lt;dependencies&gt;\n</code></pre>"},{"location":"quickstart/java-spring-boot/#2-configure-applicationproperties-file","title":"2. Configure application.properties file","text":"<p>It is very easy to configure your application for authentication using spring security with EasyAuth. Edit your application's configuration file i.e <code>application.properties</code> file. You can also use <code>application.yml</code> file providing required syntax. Configure the Oauth2 client and provider. Use credentials from your <code>Registered Client</code> that your created in EasyAuth.</p>"},{"location":"quickstart/java-spring-boot/#sample-properties-file","title":"Sample Properties File","text":"src/main/resources/application.properties<pre><code>server.forward-headers-strategy=FRAMEWORK\n\nspring.security.oauth2.client.registration.easyauth=easyauth\nspring.security.oauth2.client.registration.easyauth.client-id={client_id}\nspring.security.oauth2.client.registration.easyauth.client-secret={client_secret}\nspring.security.oauth2.client.registration.easyauth.authorization-grant-type=authorization_code\nspring.security.oauth2.client.registration.easyauth.scope=openid\nspring.security.oauth2.client.registration.easyauth.client-name={client_name}\n\n\nspring.security.oauth2.client.provider.easyauth.issuer-uri=https://{your_subdomain}.app.easyauth.io/tenantbackend\nspring.security.oauth2.client.provider.easyauth.authorization-uri=https://{your_subdomain}.app.easyauth.io/tenantbackend/oauth2/authorize\nspring.security.oauth2.client.provider.easyauth.token-uri=https://{your_subdomain}.app.easyauth.io/tenantbackend/oauth2/token\nspring.security.oauth2.client.provider.easyauth.redirect-uri={Redirect Uri such as http://127.0.0.1:8080/login/oauth2/code/easyauth}\nspring.security.oauth2.client.provider.easyauth.user-info-uri=https://{your_subdomain}.app.easyauth.io/tenantbackend/userinfo\n\n\neasyauth.config.baseuri=https://{your_subdomain}.app.easyauth.io\n</code></pre> <p>NOTE  Carefully use your credentials to provide <code>client-id</code> and <code>client-secret</code>.</p>"},{"location":"quickstart/java-spring-boot/#3-adding-easyauth-login","title":"3. Adding EasyAuth login","text":"<p>To add login using EasyAuth to your application, create a class to provide an instance of SecurityFilterChain and add the <code>@EnableWebSecurity</code> and <code>@Configuration</code> annotations.</p> src/main/java/com/easyauth/easyAuthExample/config/Oauth2LoginSecurityConfig.java<pre><code>package com.easyauth.easyAuthExample.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\nimport static org.springframework.security.config.Customizer.withDefaults;\n\n@EnableWebSecurity\n@Configuration\npublic class Oauth2LoginSecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        http.authorizeHttpRequests(authorizeRequests -&gt; authorizeRequests.anyRequest()\n                .authenticated()).oauth2Login(withDefaults());\n        return http.build();\n    }\n\n}\n</code></pre> <p>Here, Spring Security is configured to require authentication on all the paths, you can customize it using the HttpSecurity instance as you wish.</p> <p>Learn more about Spring Security Oauth configuration here.</p>"},{"location":"quickstart/java-spring-boot/#4-adding-a-controller-to-get-profile-details","title":"4. Adding a controller to get profile details","text":"<p>Now let's add controller file to provide controllers for index page and profile page to request the authenticated user details from EasyAuth resource server, using the access token.</p> <p>Here, We're using reactive <code>WebClient</code> from Spring WebFlux to send HTTP requests and receive HTTP response. </p>"},{"location":"quickstart/java-spring-boot/#add-the-webflux-dependency-in-your-maven-project","title":"Add the <code>webflux</code> dependency in your maven project.","text":"pom.xml<pre><code>        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>"},{"location":"quickstart/java-spring-boot/#configure-webclient-instance","title":"Configure WebClient instance","text":"<p>Create a class to provide instance of <code>WebClient</code>. Consider the following sample code.</p> src/main/java/com/easyauth/easyAuthExample/config/WebClientConfig.java<pre><code>package com.easyauth.easyAuthExample.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;\nimport org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@Configuration\npublic class WebClientConfig {\n    @Bean\n    WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n                new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n        return WebClient.builder()\n                .apply(oauth2Client.oauth2Configuration())\n                .build();\n    }\n\n    @Bean\n    OAuth2AuthorizedClientManager authorizedClientManager(\n            ClientRegistrationRepository clientRegistrationRepository,\n            OAuth2AuthorizedClientRepository authorizedClientRepository) {\n\n        OAuth2AuthorizedClientProvider authorizedClientProvider =\n                OAuth2AuthorizedClientProviderBuilder.builder()\n                        .authorizationCode()\n                        .refreshToken()\n                        .build();\n        DefaultOAuth2AuthorizedClientManager authorizedClientManager = new DefaultOAuth2AuthorizedClientManager(\n                clientRegistrationRepository, authorizedClientRepository);\n        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n\n        return authorizedClientManager;\n    }\n\n}\n</code></pre>"},{"location":"quickstart/java-spring-boot/#add-a-controller-to-fetch-user-profile","title":"Add a controller to fetch user profile","text":"<p>Consider the following sample code which fetches user profile from EasyAuth</p> src/main/java/com/easyauth/easyAuthExample/controller/UserRestController.java<pre><code>package com.easyauth.easyAuthExample.controller;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\nimport org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport static org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.oauth2AuthorizedClient;\n\n@RestController\npublic class UserRestController {\n    WebClient webClient;\n\n    public UserRestController(WebClient webClient) {\n        this.webClient = webClient;\n    }\n\n    @GetMapping(\"/\")\n    public String index() {\n        return \"index page\";\n    }\n\n    @GetMapping(\"/profile\")\n    public String profile(@RegisteredOAuth2AuthorizedClient(\"easyauth\") OAuth2AuthorizedClient authorizedClient,\n                          @Value(\"${easyauth.config.baseuri}\") String baseUri) {\n        String resourceUri = baseUri + \"/tenantbackend/api/profile\";\n        return webClient\n                .get()\n                .uri(resourceUri)\n                .attributes(oauth2AuthorizedClient(authorizedClient))\n                .retrieve()\n                .bodyToMono(String.class)\n                .block();\n    }\n}\n</code></pre> <p>Here, We've created a <code>GetMapping</code> for the path <code>/profile</code> that fetches profile details to the EasyAuth Api and returns them as response.</p>"},{"location":"quickstart/react/","title":"Get started with React","text":"<p>Learn how to authenticate users in a React app using EasyAuth.</p> TLDR: Try the sample React project <ol> <li> <p>Sign in to easyauth.io and create a new 'Registered Client' with redirect URI set to <code>http://127.0.0.1:3000</code></p> </li> <li> <p>Clone the sample app from https://github.com/easyauth-io/easyauth-react-example</p> <p><code>git clone https://github.com/easyauth-io/easyauth-react-example.git</code></p> </li> <li> <p>Copy <code>.env</code> into <code>.env.local</code></p> <p><code>cp .env .env.local</code></p> </li> <li> <p>Edit <code>.env.local</code> and set the parameters from your 'Registered Client' that you created in Step 1.</p> </li> <li> <p>Run <code>npm install</code> followed by <code>npm run start</code></p> </li> <li> <p>Visit http://127.0.0.1:3000</p> </li> </ol>"},{"location":"quickstart/react/#1-create-a-new-react-app","title":"1. Create a new React App","text":"<p>The following command creates an app in the directory named <code>myapp</code>. Change <code>myapp</code> to the directory name of your choice.</p> npmyarn <pre><code>npx create-react-app myapp\ncd myapp\n</code></pre> <pre><code>yarn create react-app myapp\ncd myapp\n</code></pre>"},{"location":"quickstart/react/#2-install-easyauthioeasyauth-react","title":"2. Install @easyauth.io/easyauth-react","text":"npmyarn <pre><code>npm install @easyauth.io/easyauth-react --save\n</code></pre> <pre><code>yarn add @easyauth.io/easyauth-react\n</code></pre>"},{"location":"quickstart/react/#3-set-easyauth-keys-in-envlocal-file","title":"3. Set EasyAuth keys in <code>.env.local</code> file","text":"<p>Create a <code>.env.local</code> file. Fill in the values by logging in to your EasyAuth dashboard.</p> <p>The <code>REACT_APP_EASYAUTH_REDIRECT_URL</code> will be the url where your app will be running. In this case, for development purpose it will be running on <code>http://127.0.0.1:3000</code>.</p> .env.local<pre><code>REACT_APP_EASYAUTH_APP_URL=https://&lt;your_subdomain&gt;.app.easyauth.io\nREACT_APP_EASYAUTH_CLIENT_ID=&lt;client_id&gt;\nREACT_APP_EASYAUTH_REDIRECT_URL=http://127.0.0.1:3000\n</code></pre>"},{"location":"quickstart/react/#4-edit-srcindexjs-file-as-follows","title":"4. Edit <code>src/index.js</code> file as follows:","text":"src/index.js<pre><code>import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { EasyauthProvider } from \"@easyauth.io/easyauth-react\";\n\n// ================ Wrap &lt;App&gt; with  &lt;EasyauthProvider&gt; ================= //\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  &lt;React.StrictMode&gt;\n    &lt;EasyauthProvider&gt;\n      &lt;App /&gt;\n    &lt;/EasyauthProvider&gt;\n  &lt;/React.StrictMode&gt;\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n</code></pre>"},{"location":"quickstart/react/#5-edit-srcappjs-file","title":"5. Edit <code>src/App.js</code> file","text":"src/App.js<pre><code>import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  SignedIn,\n  SignedOut,\n  UserButton,\n  UserProfile,\n  useEasyauth,\n  useUser,\n} from \"@easyauth.io/easyauth-react\";\n\nfunction App() {\n  const auth = useEasyauth();\n  const { isAuthenticated, user, isLoading } = useUser();\n\n  switch (auth.activeNavigator) {\n    case \"signinSilent\":\n      return &lt;div&gt;Signing you in...&lt;/div&gt;;\n    case \"signoutRedirect\":\n      return &lt;div&gt;Signing you out...&lt;/div&gt;;\n  }\n\n  if (auth.isLoading) {\n    return &lt;h1&gt;Loading...&lt;/h1&gt;;\n  }\n\n  if (auth.error) {\n    return &lt;div&gt;Oops... {auth.error.message}&lt;/div&gt;;\n  }\n\n  return (\n    &lt;&gt;\n      &lt;SignedIn&gt;\n        &lt;div className=\"App\"&gt;\n          &lt;header className=\"App-header\"&gt;\n            &lt;div className=\"Usr-btn\"&gt;\n              &lt;UserButton /&gt;\n            &lt;/div&gt;\n            &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt;\n            &lt;p&gt;Hello {user.email} &lt;/p&gt;\n          &lt;/header&gt;\n        &lt;/div&gt;\n      &lt;/SignedIn&gt;\n      &lt;SignedOut&gt;\n        &lt;div className=\"App\"&gt;\n          &lt;header className=\"App-header\"&gt;\n            &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt;\n            &lt;p&gt;\n              Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.\n            &lt;/p&gt;\n            &lt;button\n              style={{padding: \"0.2em 1em\", \"fontSize\":\"1em\", \"cursor\": \"pointer\"}}\n              onClick={() =&gt; void auth.signinRedirect()}\n            &gt;\n              Log in\n            &lt;/button&gt;\n          &lt;/header&gt;\n        &lt;/div&gt;\n      &lt;/SignedOut&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"quickstart/react/#test-the-app","title":"Test the App","text":"<p>Run the application on <code>127.0.0.1</code>. Then open the URL http://127.0.0.1:3000.</p> npmyarnnpm on Windowsyarn on Windows <pre><code>HOST=127.0.0.1 npm run start\n</code></pre> <pre><code>HOST=127.0.0.1 yarn start\n</code></pre> <pre><code>set HOST=127.0.0.1\nnpm run start\n</code></pre> <pre><code>set HOST=127.0.0.1\nyarn start\n</code></pre>"},{"location":"quickstart/react/#next-steps","title":"Next Steps","text":"<p>Query user information from EasyAuth is given by useUser() hook.</p>"}]}